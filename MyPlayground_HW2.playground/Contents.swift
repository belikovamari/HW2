import Foundation


///1.  Написать функцию, которая определяет, четное число или нет
func number (_ number1: Int) {
    if (number1 % 2 == 0) {
        print("Число чётное")
    } else {
        print("Число нечётное")
    }
}

number(115)



///2. Написать функцию, которая определяет, делится ли число без остатка на 3

func threeNumber (_ number3: Int) -> () {
    var n: Int = number3
    n = n % 3
    if (n == 0) {
        print("Число делиться на 3 без остатка")
    } else {
        print("Число не делится на 3 без остатка")
    }
}

threeNumber(5)



///3. Создать возрастающий массив из 100 чисел

var numbersArray: [Int] = []

for i in 1...100 {
    numbersArray.append(i)
}
print("Исходный массив: \(numbersArray)")



///4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3

for (_, value) in numbersArray.enumerated() {
    if (value % 2) == 0 && (value % 3) != 0 {
        numbersArray.remove(at: numbersArray.firstIndex(of: value)!)
    }
}
print("Измененный массив \(numbersArray)")



///5. Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 100 элементов. Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2

func fibonachi(_ count: Int) -> [Double] {
    var newArray: [Double] = []
    if count == 1 {//проверяем переданный в функцию аргумент, так как первый и единственный аргумент числа Фибоначчи 0
        let f0: Double = 0 //создаем переменную равную 0
        newArray.append(f0) //добавляем элемент в массив
    } else if count == 2 {//если передаваемый аргумент равен 2, значит в массив нужно добавить 2 первых числа это 0 и 1
        let f1: Double = 1 //создаем два эти элемента
        let f0: Double = 0 //создаем два эти элемента
        newArray.append(f0) //добавляем элементы в массив
        newArray.append(f1) //добавляем элементы в массив
    } else { //если передаваемый элемент более 2х значит нужно производить расчет значения чисел Фибоначчи
        let f1: Double = 1 // первые два элемента добавляются как и в предыдущим варианте
        let f0: Double = 0
        newArray.append(f0)
        newArray.append(f1)
        var n = 2 // так как у нас уже есть первые два элемента 0 и 1 n = 2
        while n < count + 2 { //hhhпроверяем пока n меньше того аргумента который мы передали, значит будем выполнять следующие действия
            let n1 = (newArray[n-1]) + (newArray[n-2]) //[n-1] и [n-2] так мы рассчитываем индексы значений в массиве которые мы хотим сложить
            newArray.append(n1) //добавляем сумма значений из массива в наш массив
            n+=1 //увеличиваем значение n чтобы продолжать проходить по нашему циклу
        }
    }
    return newArray //выводим массив
}
print(fibonachi(2)) //производим вывод массива через вызыв функции и передаем аргумент равный необходимому количеству элементов числа Фибоначчи
print(fibonachi(100))



///6. Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:
///a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
///b. Пусть переменная p изначально равна двум — первому простому числу.
///c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
///d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
///e. Повторять шаги c и d, пока возможно.

var set = Set(2...100)

for value in set {
    let index = 2
    while index * value <= 100 {
        set.remove(index * value)
    }
}

print(set.sorted(by: <))
